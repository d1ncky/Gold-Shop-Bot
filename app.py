import random
import sqlite3 as sql

from datetime import *

from aiogram.types import InputFile

from aiogram import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import keyboards
import requests
import json
import urllib.request
from aiogram.utils.exceptions import Throttled
import db_help

import asyncio
import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import func
from glQiwiApi import QiwiP2PClient
from glQiwiApi.qiwi.clients.p2p.types import Bill


# ======

skin = 'f/s tactical st' #–≤ –∫–∞–≤—ã—á–∫–∏ –≤–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

TOKEN = ""
adminid =  #–≤–ø–∏—Å–∞—Ç—å –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞

# ======

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

class UserState(StatesGroup):
    suma = State()
    vivod = State()
    screen = State()
    pay = State()
    otziv = State()
# ======


from aiogram.utils.deep_linking import get_start_link


# ======

#f = open('golds.txt','r')
#pricegold = str(*f)

channel = '' #–≤ –∫–∞–≤—ã—á–∫–∏ –≤–ø–∏—Å–∞—Ç—å –∫–∞–Ω–∞–ª –±–æ—Ç–∞

qiwi_p2p_client = QiwiP2PClient(shim_server_url="play.nanix.fun:80", secret_p2p="")#–≤ –∫–∞–≤—ã—á–∫–∏ –≤–ø–∏—Å–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–∏–≤–∏ p2p –∫–ª—é—á –∫—É–ø–∏—Ç—å –º–æ–∂–Ω–æ @ms_shop_robot


@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    print(message.text[7:])
    if ' ' in message.text and message.chat.id!=message.text[7:]:
        if db_help.check_user(message.from_user.id) == None:
            db_help.add_ref(message.text[7:])
            await bot.send_message(message.text[7:], f"üîî –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª.\n\n‚ùì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å–ª–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
            await bot.send_message(adminid, f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nüõ† ID [{message.chat.id} - {message.from_user.first_name}] –ø—Ä–∏–≥–ª–∞—Å–∏–ª [{message.text[7:]} - {db_help.check_user(message.from_user.id)[1]}]")

            db_help.register_user(message.chat.id, message.from_user.first_name)

            await message.answer(f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>', reply_markup=keyboards.markup_main())
        else:
            await message.answer(f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>', reply_markup=keyboards.markup_main())
    else:
        if db_help.check_user(message.from_user.id) == None:
            db_help.register_user(message.chat.id, message.from_user.first_name)
            await bot.send_message(adminid, f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nüõ† ID [{message.chat.id} - {message.from_user.first_name}]")
            await message.answer(f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>', reply_markup=keyboards.markup_main())
        else:
            await message.answer(f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>', reply_markup=keyboards.markup_main())

@dp.callback_query_handler(text="buygold")
async def test(call: types.CallbackQuery):
    pricegold = float(db_help.goldsc()[1])
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≥–æ–ª–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n–í–∞—à –±–∞–ª–∞–Ω—Å - {db_help.check_user(call.from_user.id)[4]} –≥–æ–ª–¥—ã/{db_help.check_user(call.from_user.id)[3]} —Ä—É–±–ª–µ–π\n\n–ö—É—Ä—Å –≥–æ–ª–¥—ã - {pricegold}")
    await UserState.suma.set()


@dp.callback_query_handler(text="vivodgold")
async def test(call: types.CallbackQuery):
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≥–æ–ª–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞\n\n–í–∞—à –±–∞–ª–∞–Ω—Å - {db_help.check_user(call.from_user.id)[4]} –≥–æ–ª–¥—ã/{db_help.check_user(call.from_user.id)[3]} —Ä—É–±–ª–µ–π")
    await UserState.vivod.set()

@dp.callback_query_handler(text="profile")
async def test(call: types.CallbackQuery):
    await call.message.edit_text(f"‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å\n\nID - {call.from_user.id}\n–ë–∞–ª–∞–Ω—Å (—Ä—É–±–ª–∏) - {db_help.check_user(call.from_user.id)[3]}\n–ë–∞–ª–∞–Ω—Å (–≥–æ–ª–¥–∞) - {db_help.check_user(call.from_user.id)[4]}\n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ - {db_help.check_user(call.from_user.id)[2]}", reply_markup=keyboards.profile())

@dp.callback_query_handler(text="support")
async def test(call: types.CallbackQuery):
    await call.message.edit_text(f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>", reply_markup=keyboards.supportMenu())


@dp.callback_query_handler(text="exit")
async def test(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text(f'‚úÖ <b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è \n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª, —Ç–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã - {channel}</b>', reply_markup=keyboards.markup_main())

@dp.message_handler(content_types=["photo"], state=UserState.screen)
async def golda(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.photo[-1].download("screen.jpg")
    photo = InputFile("screen.jpg")
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text="‚úÖ", callback_data=f"a_{message.from_user.id}"))
    await bot.send_photo(chat_id=adminid, photo=photo, caption= f'–í—ã–≤–æ–¥ –≥–æ–ª–¥—ã {data["golds"]} –≥–æ–ª–¥—ã\n\nID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {data["ids"]}', reply_markup=markup)
    await message.answer('–£—Å–ø–µ—à–Ω–æ!', reply_markup=keyboards.exitmenu())
    await state.finish()
@dp.callback_query_handler(text="otziiv")
async def test(call: types.CallbackQuery):
    await call.message.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞", reply_markup=keyboards.exitmenu())
    await UserState.otziv.set()

@dp.callback_query_handler(text_startswith="a_")
async def test(call: types.CallbackQuery):
    ids = call.data.split('_')[1]
    markup = InlineKeyboardMarkup(row_width=1)
    markup.row(InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="otziiv"))

    await bot.send_message(ids, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–≤–æ–¥ –≥–æ–ª–¥—ã. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup)


@dp.callback_query_handler(text="golds")
async def test(call: types.CallbackQuery):
    pricegold = float(db_help.goldsc()[1])
    await call.message.edit_text(f"ü•á –ö—É—Ä—Å –≥–æ–ª–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - {pricegold}", reply_markup=keyboards.exitmenu())


@dp.callback_query_handler(text="pay")
async def test(call: types.CallbackQuery):
    await call.message.edit_text(f"‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=keyboards.exitmenu())
    await UserState.pay.set()


@dp.message_handler(state=UserState.otziv)
async def get_username(message: types.Message, state: FSMContext):
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=keyboards.exitmenu())
    await message.forward(adminid, message)
    await state.finish()

@dp.message_handler(state=UserState.pay)
async def get_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    async with QiwiP2PClient(
            secret_p2p="",#–≤ –∫–∞–≤—ã—á–∫–∏ –≤–ø–∏—Å–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–∏–≤–∏ p2p –∫–ª—é—á –∫—É–ø–∏—Ç—å –º–æ–∂–Ω–æ @ms_shop_robot
            shim_server_url="http://play.nanix.fun:80/proxy/p2p/"
    ) as client:
        bill = await client.create_p2p_bill(amount=message.text)
        shim_url = client.create_shim_url(bill.invoice_uid)


    await state.finish()

    await state.set_state("payment")
    await state.update_data(bill=bill, summa=message.text)

    maiMenu = InlineKeyboardMarkup(row_wight=2)
    url = InlineKeyboardButton(text='QiWi', url=f'{shim_url}')
    chek = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check")
    maiMenu.row(url, chek)

    await message.answer(text=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã\n ", reply_markup=maiMenu)


@dp.callback_query_handler(state="payment", text="check")
async def handle_successful_payment(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        bill: Bill = data.get("bill")
    print(bill.amount.value)
    if await qiwi_p2p_client.check_if_bill_was_paid(bill):
        maiMenu = InlineKeyboardMarkup(row_wight=2)
        can = InlineKeyboardButton(text="‚ùå", callback_data="exit")
        maiMenu.row(can)
        await call.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.", reply_markup=maiMenu)
        await bot.send_message(adminid, f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. \n–ü–æ–ø–æ–ª–Ω–∏–ª - {call.message.chat.id} –Ω–∞ —Å—É–º–º—É {int(bill.amount.value)}")
        now = str(datetime.now())

        db_help.add_balance(int(bill.amount.value), call.message.chat.id)
        await state.finish()
    else:
        maiMenu = InlineKeyboardMarkup(row_wight=2)
        chek = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check")
        can = InlineKeyboardButton(text="‚ùå", callback_data="exit")
        maiMenu.row(can, chek)
        await call.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=maiMenu)
        await state.finish()


@dp.message_handler(state=UserState.suma)
async def get_username(message: types.Message, state: FSMContext):
    if message.text.isdigit() == True:
        pricegolda = float(db_help.goldsc()[1])
        balnce = float(message.text)//pricegolda
        if balnce >= 50:
            balnce = float(message.text)*pricegolda
            if db_help.check_user(message.from_user.id)[3] >= balnce:
                await state.finish()
                db_help.add_gold(message.from_user.id, message.text)
                db_help.del_balance(message.from_user.id, balnce)
                await bot.send_message(message.from_user.id, f"‚úÖ <b>–í—ã –∫—É–ø–∏–ª–∏ {message.text} –≥–æ–ª–¥—ã!</b>", reply_markup=keyboards.exitmenu())
                await bot.send_message(adminid, f"üîî <b>{message.from_user.id} - {message.from_user.first_name} –∫—É–ø–∏–ª - {message.text} G –ø–æ –∫—É—Ä—Å—É - {float(db_help.goldsc()[1])}, –Ω–∞ {balnce}</b>")
            else:
                await state.finish()
                await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!</b>", reply_markup=keyboards.exitmenu())
        else:
            await state.finish()
            await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - 50 —Ä—É–±–ª–µ–π</b>", reply_markup=keyboards.exitmenu())
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", reply_markup=keyboards.exitmenu())

@dp.message_handler(state=UserState.vivod)
async def get_username(message: types.Message, state: FSMContext):
    if message.text.isdigit() == True:
        if int(db_help.check_user(message.from_user.id)[4]) >= int(message.text):
            if int(message.text) >= int(30):
                photo = InputFile("example.jpg")
                gold = float(message.text)+float(message.text)*float(0.25)
                db_help.del_gold(message.from_user.id, message.text)
                await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f'–í—ã—Å—Ç–∞–≤—å—Ç–µ —Å–∫–∏–Ω {skin} –∑–∞ {gold} –≥–æ–ª–¥—ã, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–∏–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ. (–∫–∞–∫ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏)')
                await state.update_data(ids=message.from_user.id, golds=gold)
                await UserState.screen.set()
            else:
                await state.finish()

                await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 30 G!</b>", reply_markup=keyboards.exitmenu())

        else:
            await state.finish()
            await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–¥—ã!</b>", reply_markup=keyboards.exitmenu())

    else:
        await state.finish()
        await bot.send_message(message.from_user.id, f"‚ùóÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>", reply_markup=keyboards.exitmenu())



@dp.message_handler(commands=["db"])
async def command_start(message: types.Message):
    if message.from_user.id==admins:
        await bot.send_document(chat_id=admins, document = open('users.db', 'rb'), caption = f'üîî BACKUP –æ—Ç {datetime.datetime.now()}')



@dp.message_handler(commands=["backup"])
async def command_start(message: types.Message):
    if message.from_user.id==adminid:
        await backup()
        await message.answer('–ë–µ–∫–∞–ø —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞')

@dp.message_handler(commands=["give_rub"])
async def command_start(message: types.Message):
    if message.from_user.id==adminid:
        user, money = message.get_args().split()
        db_help.add_balance(user, money)
        await message.answer('–£—Å–ø–µ—à–Ω–æ')

@dp.message_handler(commands=["del_rub"])
async def command_start(message: types.Message):
    if message.from_user.id==adminid:
        user, money = message.get_args().split()
        db_help.del_balance(user, money)
        await message.answer('–£—Å–ø–µ—à–Ω–æ')

@dp.message_handler(commands=["dbg"])
async def command_start(message: types.Message):
    db_help.dbgolds()

@dp.message_handler(commands=["gold"])
async def command_start(message: types.Message):
    if message.from_user.id==adminid:
        cours = message.get_args().split()
        db_help.golds(cours)
        await message.answer(f'–£—Å–ø–µ—à–Ω–æ')

@dp.message_handler(commands=["give_gold"])
async def command_start(message: types.Message):
    if message.from_user.id==adminid:
        user, money = message.get_args().split()
        db_help.add_gold(user, money)
        await message.answer('–£—Å–ø–µ—à–Ω–æ')

@dp.message_handler(commands=["del_gold"])
async def command_start(message: types.Message):
    if message.from_user.id==adminid:
        user, money = message.get_args().split()
        db_help.del_gold(user, money)
        await message.answer('–£—Å–ø–µ—à–Ω–æ')



@dp.message_handler(commands=['alert'])
async def alert(message):
    try:
        if message.chat.id==adminid:
            await bot.send_message(message.chat.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å*", parse_mode='Markdown')
            receive_users, block_users = 0, 0
            spisok=func.spisok()
            for user1 in spisok:
                try:
                    await bot.send_message(user1[0], message.text[message.text.find(' '):])
                    receive_users += 1
                except:
                    block_users += 1
                await asyncio.sleep(0.4)
            await bot.send_message(message.chat.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ *\n"
                                                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: *{receive_users}*\n"
                                                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏: *{block_users}*", parse_mode='Markdown')
    except Exception as e:
        print('–û—à–∏–±–∫–∞ 1', e)

# ======

async def my_function():

    await bot.send_document(chat_id=adminid, document = open('users.db', 'rb'), caption = f'üîî BACKUP –æ—Ç {datetime.datetime.now()}')

async def schedule_function():
    while True:
        now = datetime.datetime.now()
        if now.hour == 0 and now.minute == 0 and now.second == 0:
            # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ 12:00:00
            asyncio.ensure_future(my_function())
        await asyncio.sleep(1)

async def backup():
    asyncio.create_task(schedule_function())

def setup():
    "Setup function"

    print('[BOT] Started')
    executor.start_polling(dp)



# ======


if __name__ == "__main__":
    setup()
